Javascript
-------------
->It  is a programming language that allows us to implement complex feaute of the web pages.
->HTML-it is a markup language that we use to structure and giving meaning to our web content.
->CSS-it is a language of style rules that used to apply styling to our Html Content.
->Javascript-It is scripting language that enables you to create dynamically updating content.
->Syntax Parser:it is a program that reads your code and findout your code is valid or not.
->Lexical Envirenment:Where something sits physically in the code you write.
ex:f1unction(){
    anklmdjdj1
    kmondkmld1
    cedeklmnd
}
->Execution Context:
  A wrapper to help manage the code that is running.
  lexical 1
  lexical 2
  lexical 3
  for e.g There are lots of lexical Envirenment which one is currently running is managed by Execution context.
  Name/Value pairs
  -----------------
  A name which maps to a unique value(name:'santanu')
  ->Object:
   A collectin of these value pare is called object.
   ->what is global Envirenment and Global object?
   Ans:When ever code is running inside Javascript it runs inside an Execution context..
   ->Javascript Execution engine creating two things for us.
   (1)Global Object
   (2)This
   ->why we are using console.log?
   ans:it is the one which will help you to write to your output to your console window.
  Hoisting:
  -----------
  When we declair variable and function in Javascript the exection engine sets up a memory space for variable and function .
  if it a variable i will assign default value is called undefined and if it is a function i will copy the entire function.
  and keep in the memory.
  Ex:b();
  console.log(a)
  var a="hello world"
  function b(){
      console.log("called b")
  }
  output:called b
         undefined

undefined:
it is special value in javascript.
warning:Never ever declair a variable undefined,because it is different to find
value is 'undefined'because we set it or javascript exection engine set it up.

Difference between (==,===):
------------------------------
->==:Check for value(a=10)
->===:check for value and type
ex:var a="10"
   console.log(a===10)
   output:false
->==if a is 10 or not checking if a is a number or string
=>===if a is 10 and a is an integer
   Types:
-----------
Dynamic Typing:
----------------
You don't tell the engine what type of data a variable holds,it figures out while code is running.
based on the data it will try to decide type.
ex: var a="santanu"
        a=1;
        a={}
        a=[]
        a=function(){}
console.log(typeof a)

Strict Typing:
--------------
c# or java follows strict typing.

Prmitive Types:
---------------
A types of data that represent a single value is called Prmitive data type.
1.undefined-This represent lack of existance(we should never use This)
2.null-This represent lack of existance(We can set a variable to This)
3.Boolean-true or false
4.integer/floating type(decimal)
5.string-a sequence of character
6.Symbol-used in ES6
Function:
----------
it is a block of code wrapped around flower brackets and invocated later.
Ex:function functionname(){

}
Types of functions:
---------------------
(1)Regular Function
(2)Anonymous Function
(3)Immediately Invoked function(IIFS)

About Regular Function:
--------------------------
Ex:function sayHello(){
    console.log('santanu')
}
sayHello();

function getFullName(firstName,lastName){
    return firstName+''+lastName
}
var FullName=getFullName('Santanu','Paikaray');
console.log(FullName)

function test(){
    return undefined
    return null
    return 1
    return "santanu"
    return true
    return {}
    return []
    return function(){}
}
var output=test();
console.log(output)
Anonymous Function:
----------------------
Function without any name is called Anonymous function.
ex:
  var sample = function (){

  }
var output=sample()
console.log(output)
First Class Function:
---------------------
(1)Can be Invoked
(2)assign to a variable
(3)Passed as parameter to another variable

var timeoutfunction=function(){
    console.log('This will be printed after three seconds')
}
setTimeout(timeoutfunction,6000)
->What is callback function?
Ans:Function passing to the parameter to the parameter to another function
is called callback.
Immediately Invoke Function:
-----------------------------
var sample=(function (){
    console.log("This is sample function")
    return 1

})()
console.log(sample)
->if you are wrapping your function around parenthesis trying to Invoke it Immediately that is called Immediately Invoke function.
->it is just similar to anonymous function but the Difference is it is wrapped around parenthesis.
Objects:
----------
->An Object is a collectin of name value pairs.
->If you have two flower brackets() in javascript that means you are deals with object.
->How to create an object?
First i will create a variable
var person=new object();
console.log(person)
How to pass property to my object.
person["firstName"]="Santanu"
person["lastName"]="Paikaray"

Using Dot Notation:
------------------------
By using dot Notation we can represent our object also.
console.log(person.firstName)
console.log(person.lastName)
Object-literial:-
------------------
var person={};
console.log(person)
->Having two flower brackets is object literial Syntax.
->When your function inside the object that become method.
ex:var person={
    id:1
    firstName:"santanu"
    lastName:"Paikaray"
    getDetails:function(){

    }
}
console.log(person)
->primitive types inside an object are called properties.

Object.create() method creates a new object using an existing object or null
as the protoype for newly created object

var person = Object.create(null)//create an empty/null object
var person = object.create({})//create a normal function

JSON:
------
->it is a javascript object Notation.
->Inspired by the object literral Notation.
->Earler how to pass the data to our server is 
<data>
<firstName>Santanu</firstName>
<lastName>Paikaray</lastName>
</data>
->Now day we are pasing data to our server is ðŸ¥¿
JSON:
-----------
common usage of json is to exchange data to/from webserver.
{
    "firstName":"Santanu"
    "lastName":"Paikaray"
}
Object:
----------
{
    firstName:"Santanu"
    lastName:"Paikaray"
}
->Anything which is JSON valid is object literial.
JSON.stringify-converts a javascript value into
seriazlied string.

Difference between stringify and parser:
-------------------------------------------
stringify:it will serialize your object and convert into string.
Parser:it will deserialze your object and convert into json object.

Arrays:
-------
->it is an object that can store a collectin of items.
->it is usefull when you want to store large amount of data.

This is Array literial:
---------------------------
var students=["santanu","sunita","surekha","pradeep"]
This is new array array literial:
----------------------------------
var People=new array("uma","santanu","lucky","urmi")

ex:
var array=new Array(5);
array[0]="Uma"
array[1]="Santanu"
array[2]="lucky"
array[3]="Happy"
array[4]="Sidhanta"

console.log(array)
console.log(array[0])
console.log(array[1])
console.log(array[2])
console.log(array[3])
console.log(array[4])
var fruits = new Array ("Orange","Apple","Banana","Gurva")
var vegetables=new Array("Potato","Tomato","Egg plant",)
->What is difference between foreach and map?
Ans:Map return the value .if we will use for each we can't return the value.

Closure:
----------
->Inner function having access to the variables of outer function.
->Child function having access to the parent function variable is called closure.
EX-1:function greet(message){
    return function (name){
        return message+' '+name
    }
}
var sayHello=greet("Hello");
console.log(say Hello)
console.log(sayHello("sayHello"))
Ex-2:
------
function greet(message){
    return function(firstName){
    return function(lastName){
    return function(city){
        return message +''+
        firstName +''+
        lastName +''+
        city

    }
}
}
}
console.log(greet("Hello")('Santanu')('ch')('Germany'))

Bind vs Call vs apply:
----------------------
Bind-sets 'this' keyword and creates a copy of that function
call-sets 'this' keyword and execute the function Immediately and 
doesn't create a new copy of the function,it takes comma seperated values.
apply-sets 'this' keyword, smilar to call 

->Rember Every finction in javascript will have called access to this 3methods.
(i)Bind(ii)Call(iii)Apply
Example:-
-------------
var person1={firstName:'santanu',lastName:'paikaray'}
var person2={firstName:'sidhanta',lastName:'paikaray'}
var person3={firstName:'sipun',lastName:'paikaray'}
var person4={firstName:'sandeep',lastName:'paikaray'}

function getName(message,city){
    return message + ' from ' + city + ' to ' + this.firstName +' '+ this.lastName
}
var bindMessage = getName.bind(person1)
console.log(bindMessage('Hello','Telangapada'))

var bindMessage = getName.bind(person2)
console.log(bindMessage('Hello','Telangapada'))

var callMessage = getName.call(person3,'Hello','Boston')
console.log(callMessage)

var applyMessage=getName.apply(person4,['Hello','Boston'])
console.log(applyMessage)
Remember:
-----------
->This call,Bind And apply are the method which are by default avalable to any 
function.
->This method can be used to set 'this' keyword.
This:-
--------
This function is inside an abject the value of this is this  that object.
->If function has another fnction this value becomes object.
Every Object has three method:
-------------------------------
(1)Object.PreventExtensions
(2)Object.seal()
(3)Object.freeze()
(1)Object.PreventExtensions:
-------------------------------
Here we can edit and delete the properties but can't add new properties.
(2)Object.seal()
------------------
we can adit the properties but we can't add new properties or can't delete existing properties.
(3)Object.freeze()
-------------------
We can't add ,edit and delete the properties.
properties:
------------
function customer(gender){
    this.gender=gender
}
var customer1=new customer('Male')
var customer2=new customer('Female')
->By the help of 'this' keyword we can findout properties of your class.
 ex of class:
 ------------
 function Student(){

 }
 ex of instance:
 ----------------
 function Person(){

 } 
 var person1=new person();
 var person2=new person();

 ex of constructor:
 -------------------
 function Order(){
     console.log('order is placed')
 }
 var order=new order();
 ex of properties:
 -----------------
 function Customer(gender){
     this.gender = gender
 }
 var  Customer1=new Customer('Female');
 var Customer2=new Customer('Male')

 protoype:
 ---------
 The protoype is an object that is associated with every functions and object in javascript .
 ->This is a special type of object to which additional properties and method can be attached.
 ->Which will shared accross all the instances of its constructor function.

Inheritance:
------------
One Object get access to the properties and methods of another object.
In javascript Inheritance is supported by using prototype object.This is also called prototypal Inheritance.
Note:
------
->Prototype is the one which allow to extends method and properties of our class.
->Prototype is the keyword which will help us to implement Inheritance.
->Here in javascript instade of class we are using function.
->Multiple Inheritance is also possible in Javascript.

Polymorphism:
--------------
It means function existing in many forms.
 
 In programming,the ability for object to present the same interface for different hehaviour.
Error-handling:
---------------
it helps us to handle the error exspecially runtime,for accessing undefined variables or undefined functions.
How to handle the error?
------------------------
By using try-catch-finally

try{
    //code that may or may not throw error
}
catch{
    //code to be executed if an error occure
}
finally{
    //code to be executed requireless of an error occure or not
}

There are two types of design patterns
---------------------------------------
(1)singleton-pattern
(2)Modular-pattern
singleton design pattern:
-------------------------
->Limit the number of instances of  a perticular object to just one.
->singletons are usefull in Stuations where system wide actions needs to be coordinated from a single
center place.
Exp:Database connection pool
The pool that manages the creation,destruction and lifetime of all database connections for the entire application.
->Basically we are using singleton design pattern for database connection.
Ex:var singleton=(function(){
    var instance=null;

    var createInstance=function(){
        var obj=Object.create(null)
        console.log('Object is created')
        return obj;
    }
    return{
        getInstance:function(){
            if(!instance){
                instance=createInstance();
            }
            return instance;
        }
    }

})();
var singleton1 = singleton.getInstance();
console.log(singleton1);
var singleton2=singleton.getInstance();
console.log(singleton2)
var singleton3=single.getInstance();
console.log(singleton3)
var singleton4=singleton.getInstance();
console.log(singleton4)

